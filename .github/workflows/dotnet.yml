# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore OrderMicroservices.sln
    - name: Build
      run: dotnet build OrderMicroservices.sln --configuration Release --no-restore
      
    - name: Run Tests with Coverage
      run: dotnet test OrderMicroservices.sln --configuration Release --setings ./OrderMicroservices.Orders.Tests/coverlet.runsettings --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx
      
    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./TestResults

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: TestResults/**/coverage.cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        indicators: true
        output: both
        thresholds: '60 80'
    - name: Send Detailed Coverage Report to Discord
      run: |
        # Ler e processar o relat√≥rio de coverage
        COVERAGE_CONTENT=$(cat code-coverage-results.md)
        
        # Extrair todas as m√©tricas importantes
        # Extrai a porcentagem de cobertura de linhas (Line Rate)
        LINE_COVERAGE=$(echo "$COVERAGE_CONTENT" | grep -oP '\*\*Summary\*\* \| \*\*\K[0-9]+%' | head -1)
        
        # Extrai o detalhe linhas cobertas/total (468 / 1192)
        TOTAL_LINES=$(echo "$COVERAGE_CONTENT" | grep -oP '\*\*Summary\*\* \| \*\*[0-9]+% \(\K[0-9]+ / [0-9]+' | head -1)
        
        # Extrai a porcentagem de cobertura de branches (Branch Rate)  
        BRANCH_COVERAGE=$(echo "$COVERAGE_CONTENT" | grep -oP '\*\*Summary\*\* \| \*\*[0-9]+% \([0-9]+ / [0-9]+\) \| \*\*\K[0-9]+%' | head -1)
        
        # Extrai o detalhe branches cobertos/total (16 / 40)
        TOTAL_BRANCHES=$(echo "$COVERAGE_CONTENT" | grep -oP '\*\*Summary\*\* \| \*\*[0-9]+% \([0-9]+ / [0-9]+\) \| \*\*[0-9]+% \(\K[0-9]+ / [0-9]+' | head -1)
        
        # Extrai a complexidade total
        COMPLEXITY=$(echo "$COVERAGE_CONTENT" | grep -oP '\*\*Summary\*\* \| \*\*[0-9]+% \([0-9]+ / [0-9]+\) \| \*\*[0-9]+% \([0-9]+ / [0-9]+\) \| \*\*\K[0-9]+' | head -1)
        
        # Extrai o status de sa√∫de (‚úî, ‚ùå, ‚ûñ)
        HEALTH_STATUS=$(echo "$COVERAGE_CONTENT" | grep -oP '\*\*Summary\*\*.*?\|.*?\|.*?\|.*?\| \*\*\K[^|*]+' | head -1 | xargs)
        
        # Configurar cores baseadas na cobertura
        LINE_PCT=${LINE_COVERAGE%\%}
        if (( $(echo "$LINE_PCT >= 80" | bc -l) )); then
            COLOR=3066993
            EMOJI="üéâ"
        elif (( $(echo "$LINE_PCT >= 60" | bc -l) )); then
            COLOR=15105570
            EMOJI="‚ö†Ô∏è"
        else
            COLOR=15158332
            EMOJI="üö®"
        fi
        
        # Criar mensagem para Discord
        JSON_PAYLOAD=$(jq -n \
          --arg repo "${{ github.repository }}" \
          --arg branch "${{ github.ref_name }}" \
          --arg commit "${GITHUB_SHA::7}" \
          --arg run_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --arg line_cov "$LINE_COVERAGE" \
          --arg branch_cov "$BRANCH_COVERAGE" \
          --arg lines_detail "$TOTAL_LINES" \
          --arg branches_detail "$TOTAL_BRANCHES" \
          --argjson color "$COLOR" \
          --arg emoji "$EMOJI" \
          '{
            "username": "GitHub",
            "avatar_url": "https://cdn-icons-png.flaticon.com/512/4727/4727496.png",
            "embeds": [
              {
                "title": "\($emoji) Code Coverage Report",
                "color": $color,
                "description": "Test coverage results for latest build",
                "fields": [
                  {
                    "name": "üìä Lines Coverage",
                    "value": "\($line_cov) (\($lines_detail))",
                    "inline": true
                  },
                  {
                    "name": "üåø Branches Coverage",
                    "value": "\($branch_cov) (\($branches_detail))",
                    "inline": true
                  },
                  {
                    "name": "üîó Result",
                    "value": "[View Run]($run_url)",
                    "inline": true
                  }
                ],
                "footer": {
                  "text": "\($repo) @ \($branch) | \($commit)"
                },
                "timestamp": now|strftime("%Y-%m-%dT%H:%M:%SZ")
              }
            ]
          }')
        
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          "${{ secrets.DISCORD_WEBHOOK_URL }}"
